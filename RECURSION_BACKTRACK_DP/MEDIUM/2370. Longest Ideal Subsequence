static bool _ = [] {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    return false;
}();

class Solution {
public:
    int n;
    int solve(string s, int k, int previous, int current, vector<vector<int>>&memoize){
        if(current >= n){
            return 0;
        }
        if(previous != -1 && memoize[previous][current] != -1){
            return memoize[previous][current];
        }
        int take = 0;

        if(previous == -1 || abs((s[previous] - 'a') - (s[current] - 'a')) <= k){
            take = 1 + solve(s,k, current, current + 1, memoize);
        }

        int skip = solve(s, k, previous, current + 1, memoize);
        if(previous != -1){
            memoize[previous][current] = max(take, skip);
        }
        return max(take, skip);
    }
    int longestIdealString(string s, int k) {
        n = s.length();
        vector<vector<int>>memoize(n,vector<int>(n+1,-1));
        return solve(s,k,-1,0, memoize);
    }
};
